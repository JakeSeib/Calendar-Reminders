{"version":3,"sources":["features/calendar/Calendar.module.css","features/calendar/calendarSlice.js","features/calendar/Calendar.js","features/reminder/reminderUtils.js","features/reminder/Reminder.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","todayStr","require","moment","format","calendarSlice","createSlice","name","initialState","eventsById","1","id","title","start","display","backgroundColor","2","3","4","guid","reducers","createEvent","state","action","payload","String","updateEvent","deleteEvent","actions","selectEventsById","calendar","Calendar","setCurrEvent","useSelector","events","createSelector","hash","Object","values","getEventArray","dispatch","useDispatch","plugins","dayGridPlugin","interactionPlugin","editable","initialView","dateClick","arg","dateStr","eventClick","info","event","eventChange","changeInfo","toPlainObject","dayCellContent","Button","className","styles","dayNumberText","colorToHexMap","Red","Orange","Green","Teal","Blue","hexToColorMap","property","Reminder","currEvent","handleChange","target","value","split","handleClose","Modal","show","onHide","Header","closeButton","Title","Body","Form","onSubmit","preventDefault","Group","controlId","Label","Control","required","type","placeholder","onChange","maxLength","formatDate","hour","minute","hour12","as","variant","onClick","App","useState","configureStore","reducer","calendarReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,kBAAkB,oC,2MCE9BC,EAFSC,EAAQ,GAENC,GAASC,OAAO,oBAEpBC,EAAgBC,YAAY,CACvCC,KAAM,WACNC,aAAc,CACZC,WAAY,CACVC,EAAG,CAAEC,GAAI,IAAKC,MAAO,aAAcC,MAAOZ,EAAUa,QAAS,QAASC,gBAAiB,WACvFC,EAAG,CAAEL,GAAI,IAAKC,MAAO,aAAcC,MAAOZ,EAAUa,QAAS,QAASC,gBAAiB,WACvFE,EAAG,CAAEN,GAAI,IAAKC,MAAO,aAAcC,MAAOZ,EAAUa,QAAS,QAASC,gBAAiB,WACvFG,EAAG,CAAEP,GAAI,IAAKC,MAAO,aAAcC,MAAOZ,EAAUa,QAAS,QAASC,gBAAiB,YAEzFI,KAAM,GAERC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMH,OACNI,EAAOC,QAAQb,GAAKc,OAAOH,EAAMH,MACjCG,EAAMb,WAAWa,EAAMH,MAAQI,EAAOC,SAExCE,YAAa,SAACJ,EAAOC,GACnBD,EAAMb,WAAWc,EAAOC,QAAQb,IAAMY,EAAOC,SAE/CG,YAAa,SAACL,EAAOC,UACZD,EAAMb,WAAWc,EAAOC,a,EAKoBnB,EAAcuB,QAAxDP,E,EAAAA,YAAaK,E,EAAAA,YAAaC,E,EAAAA,YAE5BE,EAAmB,SAAAP,GAAK,OAAIA,EAAMQ,SAASrB,YAEzCJ,IAAf,Q,iBCzBe,SAAS0B,EAAT,GAAqC,IAAjBC,EAAgB,EAAhBA,aAC3BvB,EAAawB,YAAYJ,GAKzBK,EAJgBC,aACpB,SAAC1B,GAAD,OAAgBA,KAChB,SAAA2B,GAAI,OAAIC,OAAOC,OAAOF,KAETG,CAAc9B,GACvB+B,EAAWC,cAuBjB,OACE,cAAC,IAAD,CACEC,QAAS,CAAEC,IAAeC,KAC1BC,SAAS,OACTC,YAAY,eACZZ,OAAQA,EACRa,UA3BoB,SAACC,GACvBhB,EAAa,CACXpB,MAAO,GACPC,MAAM,GAAD,OAAKmC,EAAIC,QAAT,UACLnC,QAAS,QACTC,gBAAiB,aAuBjBmC,WAnBqB,SAACC,GACxBnB,EAAavB,EAAW0C,EAAKC,MAAMzC,MAmBjC0C,YAhBsB,SAACC,GACzB,OAAOd,EAASd,EAAY4B,EAAWF,MAAMG,mBAgB3CC,eAbmB,SAACR,GAAD,OACrB,cAACS,EAAA,EAAD,CAAQC,UAAWC,IAAO,mBAA1B,SAA+CX,EAAIY,mB,2CCrC1CC,EAAgB,CAC3BC,IAAK,UACLC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,KAAM,WAGKC,EAAgB,GAE7B,IAAK,IAAMC,KAAYP,EACrBM,EAAeN,EAAeO,IAAeA,ECEhC,SAASC,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,UAAWtC,EAAgB,EAAhBA,aACtCQ,EAAWC,cAEX8B,EAAe,SAAAnB,GACnB,OAAQA,EAAMoB,OAAOjE,MACnB,IAAK,aACH,OAAOyB,EAAa,2BACfsC,GADc,IAEjBzD,MAAM,GAAD,OAAKuC,EAAMoB,OAAOC,MAAlB,YAA2BH,EAAUzD,MAAM6D,MAAM,KAAK,OAE/D,IAAK,aACH,OAAO1C,EAAa,2BACfsC,GADc,IAEjBzD,MAAM,GAAD,OAAKyD,EAAUzD,MAAM6D,MAAM,KAAK,GAAhC,YAAsCtB,EAAMoB,OAAOC,UAE5D,IAAK,kBACH,OAAOzC,EAAa,2BACfsC,GADc,kBAEhBlB,EAAMoB,OAAOjE,KAAOsD,EAAcT,EAAMoB,OAAOC,UAEpD,QACE,OAAOzC,EAAa,2BACfsC,GADc,kBAEhBlB,EAAMoB,OAAOjE,KAAO6C,EAAMoB,OAAOC,WAKpCE,EAAc,kBAAM3C,EAAa,OAiBvC,OAAO,eAAC4C,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQH,EAA3B,UACL,cAACC,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,UAAcX,EAAU3D,GAAK,gBAAkB,sBAEjD,cAACiE,EAAA,EAAMM,KAAP,UACE,eAACC,EAAA,EAAD,CAAMzB,UAAU,gBAAgB0B,SApBV,SAAAhC,GACxBA,EAAMiC,iBACFf,EAAU3D,GACZ6B,EAASd,EAAY4C,IAErB9B,EAASnB,EAAYiD,IAEvBK,KAaE,UACE,eAACQ,EAAA,EAAKG,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACJ,EAAA,EAAKK,MAAN,wCACA,cAACL,EAAA,EAAKM,QAAN,CACEC,UAAQ,EACRC,KAAK,OACLpF,KAAK,QACLkE,MAAOH,EAAU1D,MACjBgF,YAAY,cACZC,SAAUtB,EACVuB,UAAU,UAGd,eAACX,EAAA,EAAKG,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACJ,EAAA,EAAKK,MAAN,mBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,UAAQ,EACRC,KAAK,OACLpF,KAAK,aACLkE,MAAOH,EAAUzD,MAAM6D,MAAM,KAAK,GAClCmB,SAAUtB,OAGd,eAACY,EAAA,EAAKG,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACJ,EAAA,EAAKK,MAAN,mBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,UAAQ,EACRC,KAAK,OACLpF,KAAK,aACLkE,MAAOsB,YAAWzB,EAAUzD,MAAO,CAC/BmF,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAGZL,SAAUtB,OAGd,eAACY,EAAA,EAAKG,MAAN,CAAYC,UAAU,kBAAtB,UACE,cAACJ,EAAA,EAAKK,MAAN,oBACA,eAACL,EAAA,EAAKM,QAAN,CACEU,GAAG,SACH5F,KAAK,kBACLkE,MAAON,EAAcG,EAAUvD,iBAC/B6E,YAAY,cACZC,SAAUtB,EACVuB,UAAU,KANZ,UAQE,yCACA,4CACA,2CACA,0CACA,gDAGJ,cAACrC,EAAA,EAAD,CAAQ2C,QAAQ,UAAUT,KAAK,SAA/B,kBACCrB,EAAU3D,GAAK,cAAC8C,EAAA,EAAD,CAAQ2C,QAAQ,SAASC,QAlE1B,WACnB7D,EAASb,EAAY2C,EAAU3D,KAC/BgE,KAgEoB,oBAAkE,KAClF,cAAClB,EAAA,EAAD,CAAQ2C,QAAQ,YAAYC,QAAS1B,EAArC,2B,MCnHO,SAAS2B,IAAO,IAAD,EACMC,mBAAS,MADf,mBACrBjC,EADqB,KACVtC,EADU,KAG5B,OACE,eAAC,WAAD,WACE,cAACD,EAAD,CAAUC,aAAcA,IACvBsC,EAAY,cAACD,EAAD,CAAUC,UAAWA,EAAWtC,aAAcA,IAAmB,QCRrEwE,kBAAe,CAC5BC,QAAS,CACP3E,SAAU4E,KCOMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f354f51b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-date_num\":\"Calendar_button-date_num__2eGeM\"};","import { createSlice } from '@reduxjs/toolkit'\nconst moment = require('moment')\n\nconst todayStr = moment().format(\"YYYY-MM-DDTHH:MM\")\n\nexport const calendarSlice = createSlice({\n  name: 'calendar',\n  initialState: {\n    eventsById: {\n      1: { id: '1', title: 'reminder 1', start: todayStr, display: 'block', backgroundColor: '#d9534f' },\n      2: { id: '2', title: 'reminder 2', start: todayStr, display: 'block', backgroundColor: '#d9534f' },\n      3: { id: '3', title: 'reminder 3', start: todayStr, display: 'block', backgroundColor: '#0275d8' },\n      4: { id: '4', title: 'reminder 4', start: todayStr, display: 'block', backgroundColor: '#0275d8' }\n    },\n    guid: 4\n  },\n  reducers: {\n    createEvent: (state, action) => {\n      state.guid++\n      action.payload.id = String(state.guid)\n      state.eventsById[state.guid] = action.payload\n    },\n    updateEvent: (state, action) => {\n      state.eventsById[action.payload.id] = action.payload\n    },\n    deleteEvent: (state, action) => {\n      delete state.eventsById[action.payload]\n    }\n  }\n})\n\nexport const { createEvent, updateEvent, deleteEvent } = calendarSlice.actions\n\nexport const selectEventsById = state => state.calendar.eventsById\n\nexport default calendarSlice.reducer\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from 'react-bootstrap/Button'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { createSelector } from 'reselect'\nimport { updateEvent, selectEventsById } from './calendarSlice'\nimport styles from './Calendar.module.css'\n\nexport default function Calendar({ setCurrEvent }) {\n  const eventsById = useSelector(selectEventsById)\n  const getEventArray = createSelector(\n    (eventsById) => eventsById,\n    hash => Object.values(hash) // incompatible with older browsers\n  )\n  const events = getEventArray(eventsById)\n  const dispatch = useDispatch()\n\n  const handleDateClick = (arg) => {\n    setCurrEvent({\n      title: '',\n      start: `${arg.dateStr}T12:00`,\n      display: 'block',\n      backgroundColor: '#0275d8'\n    })\n  }\n\n  const handleEventClick = (info) => {\n    setCurrEvent(eventsById[info.event.id])\n  }\n\n  const handleEventChange = (changeInfo) => {\n    return dispatch(updateEvent(changeInfo.event.toPlainObject()))\n  }\n\n  const dayCellContent = (arg) => (\n    <Button className={styles['button-date_num']}>{arg.dayNumberText}</Button>\n  )\n\n  return (\n    <FullCalendar\n      plugins={[ dayGridPlugin, interactionPlugin ]}\n      editable='true'\n      initialView='dayGridMonth'\n      events={events}\n      dateClick={handleDateClick}\n      eventClick={handleEventClick}\n      eventChange={handleEventChange} // called for drag-n-drop/resize\n      dayCellContent={dayCellContent}\n    />\n  )\n}\n","export const colorToHexMap = {\n  Red: '#d9534f',\n  Orange: '#f0ad4e',\n  Green: '#5cb85c',\n  Teal: '#5bc0de',\n  Blue: '#0275d8'\n}\n\nexport const hexToColorMap = {}\n\nfor (const property in colorToHexMap) {\n  hexToColorMap[ colorToHexMap[ property ] ] = property\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { formatDate } from '@fullcalendar/core'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {\n  createEvent,\n  updateEvent,\n  deleteEvent\n} from '../calendar/calendarSlice'\nimport { hexToColorMap, colorToHexMap } from './reminderUtils'\n\nexport default function Reminder({ currEvent, setCurrEvent }) {\n  const dispatch = useDispatch()\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'start-date':\n        return setCurrEvent({\n          ...currEvent,\n          start: `${event.target.value}T${currEvent.start.split('T')[1]}`\n        })\n      case 'start-time':\n        return setCurrEvent({\n          ...currEvent,\n          start: `${currEvent.start.split('T')[0]}T${event.target.value}`\n        })\n      case 'backgroundColor':\n        return setCurrEvent({\n          ...currEvent,\n          [event.target.name]: colorToHexMap[event.target.value]\n        })\n      default:\n        return setCurrEvent({\n          ...currEvent,\n          [event.target.name]: event.target.value\n        })\n    }\n  }\n\n  const handleClose = () => setCurrEvent(null)\n\n  const handleEventSubmit = event => {\n    event.preventDefault()\n    if (currEvent.id) {\n      dispatch(updateEvent(currEvent))\n    } else {\n      dispatch(createEvent(currEvent))\n    }\n    handleClose()\n  }\n\n  const handleDelete = () => {\n    dispatch(deleteEvent(currEvent.id))\n    handleClose()\n  }\n\n  return <Modal show={true} onHide={handleClose}>\n    <Modal.Header closeButton>\n      <Modal.Title>{currEvent.id ? 'Edit Reminder' : 'Create Reminder'}</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <Form className='reminder-form' onSubmit={handleEventSubmit}>\n        <Form.Group controlId=\"title\">\n          <Form.Label>Title (max 30 characters)</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            name=\"title\"\n            value={currEvent.title}\n            placeholder=\"Enter title\"\n            onChange={handleChange}\n            maxLength=\"30\"\n          />\n        </Form.Group>\n        <Form.Group controlId=\"start-date\">\n          <Form.Label>Date</Form.Label>\n          <Form.Control\n            required\n            type=\"date\"\n            name=\"start-date\"\n            value={currEvent.start.split('T')[0]}\n            onChange={handleChange}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"start-time\">\n          <Form.Label>Time</Form.Label>\n          <Form.Control\n            required\n            type=\"time\"\n            name=\"start-time\"\n            value={formatDate(currEvent.start, {\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n              }\n            )}\n            onChange={handleChange}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"backgroundColor\">\n          <Form.Label>Color</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"backgroundColor\"\n            value={hexToColorMap[currEvent.backgroundColor]}\n            placeholder=\"Enter title\"\n            onChange={handleChange}\n            maxLength=\"30\"\n          >\n            <option>Red</option>\n            <option>Orange</option>\n            <option>Green</option>\n            <option>Teal</option>\n            <option>Blue</option>\n          </Form.Control>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">Save</Button>\n        {currEvent.id ? <Button variant=\"danger\" onClick={handleDelete}>Delete</Button> : null}\n        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n      </Form>\n    </Modal.Body>\n  </Modal>\n}\n","import React, { Fragment, useState } from 'react'\r\nimport Calendar from './features/calendar/Calendar'\r\nimport Reminder from './features/reminder/Reminder'\r\nimport './App.css'\r\n\r\nexport default function App() {\r\n  const [currEvent, setCurrEvent] = useState(null)\r\n\r\n  return (\r\n    <Fragment>\r\n      <Calendar setCurrEvent={setCurrEvent} />\r\n      {currEvent ? <Reminder currEvent={currEvent} setCurrEvent={setCurrEvent} /> : null}\r\n    </Fragment>\r\n  )\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport calendarReducer from '../features/calendar/calendarSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    calendar: calendarReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}